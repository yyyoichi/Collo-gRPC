/**
 * @fileoverview gRPC-Web generated client stub for collo
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.12.4
// source: collo.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as collo_pb from './collo_pb';


export class ColloServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorColloStream = new grpcWeb.MethodDescriptor(
    '/collo.ColloService/ColloStream',
    grpcWeb.MethodType.SERVER_STREAMING,
    collo_pb.ColloRequest,
    collo_pb.ColloResponse,
    (request: collo_pb.ColloRequest) => {
      return request.serializeBinary();
    },
    collo_pb.ColloResponse.deserializeBinary
  );

  colloStream(
    request: collo_pb.ColloRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<collo_pb.ColloResponse> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/collo.ColloService/ColloStream',
      request,
      metadata || {},
      this.methodDescriptorColloStream);
  }

}


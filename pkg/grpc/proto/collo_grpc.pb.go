// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: proto/collo.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ColloService_ColloStream_FullMethodName = "/collo.ColloService/ColloStream"
)

// ColloServiceClient is the client API for ColloService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ColloServiceClient interface {
	ColloStream(ctx context.Context, in *ColloRequest, opts ...grpc.CallOption) (ColloService_ColloStreamClient, error)
}

type colloServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewColloServiceClient(cc grpc.ClientConnInterface) ColloServiceClient {
	return &colloServiceClient{cc}
}

func (c *colloServiceClient) ColloStream(ctx context.Context, in *ColloRequest, opts ...grpc.CallOption) (ColloService_ColloStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ColloService_ServiceDesc.Streams[0], ColloService_ColloStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &colloServiceColloStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ColloService_ColloStreamClient interface {
	Recv() (*ColloResponse, error)
	grpc.ClientStream
}

type colloServiceColloStreamClient struct {
	grpc.ClientStream
}

func (x *colloServiceColloStreamClient) Recv() (*ColloResponse, error) {
	m := new(ColloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ColloServiceServer is the server API for ColloService service.
// All implementations must embed UnimplementedColloServiceServer
// for forward compatibility
type ColloServiceServer interface {
	ColloStream(*ColloRequest, ColloService_ColloStreamServer) error
	mustEmbedUnimplementedColloServiceServer()
}

// UnimplementedColloServiceServer must be embedded to have forward compatible implementations.
type UnimplementedColloServiceServer struct {
}

func (UnimplementedColloServiceServer) ColloStream(*ColloRequest, ColloService_ColloStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ColloStream not implemented")
}
func (UnimplementedColloServiceServer) mustEmbedUnimplementedColloServiceServer() {}

// UnsafeColloServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ColloServiceServer will
// result in compilation errors.
type UnsafeColloServiceServer interface {
	mustEmbedUnimplementedColloServiceServer()
}

func RegisterColloServiceServer(s grpc.ServiceRegistrar, srv ColloServiceServer) {
	s.RegisterService(&ColloService_ServiceDesc, srv)
}

func _ColloService_ColloStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ColloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ColloServiceServer).ColloStream(m, &colloServiceColloStreamServer{stream})
}

type ColloService_ColloStreamServer interface {
	Send(*ColloResponse) error
	grpc.ServerStream
}

type colloServiceColloStreamServer struct {
	grpc.ServerStream
}

func (x *colloServiceColloStreamServer) Send(m *ColloResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ColloService_ServiceDesc is the grpc.ServiceDesc for ColloService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ColloService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "collo.ColloService",
	HandlerType: (*ColloServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ColloStream",
			Handler:       _ColloService_ColloStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/collo.proto",
}
